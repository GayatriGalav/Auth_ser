Order Place Page::::::

import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from 'react-router-dom';
import "bootstrap/dist/css/bootstrap.min.css";

export default function Component() {
  const [cartItems, setCartItems] = useState([]);
  const [couponCode, setCouponCode] = useState("");
  const [finalPrice, setFinalPrice] = useState(0);
  const [totalPrice, setTotalPrice] = useState(0);
  const [discounts, setDiscounts] = useState([]);
  const navigate = useNavigate();
  const [userData, setUserData] = useState({
    username: "",
    address: "",
    address2: "",
    city: "",
    state: "",
    zip: "",
    mobile: ""
  });
  const [userAddress, setUserAddress] = useState("");
  const [isAddressSaved, setIsAddressSaved] = useState(false);
  const [errorMessages, setErrorMessages] = useState([]);
  const [cartId, setCartId] = useState(null);
  const [customerId, setCustomerId] = useState(null);
  const [restaurantId, setRestaurantId] = useState(null);

  useEffect(() => {
    // Fetch cart items
    axios.get("http://localhost:8084/cart/1/items")
      .then((response) => {
        setCartItems(response.data);
        const total = response.data.reduce((sum, item) => sum + item.totalPrice, 0);
        setTotalPrice(total);
        setFinalPrice(total);
        setCartId(response.data[0]?.cartId);
        setRestaurantId(response.data[0]?.restaurantId);
      })
      .catch((error) => console.error("Error fetching order items:", error));

    // Fetch user data
    axios.get("http://localhost:8083/customer/1")
      .then((response) => {
        const user = response.data;
        setUserData({
          username: user.name,
          address: user.address,
          address2: "",
          city: user.city || "",
          state: user.state || "",
          zip: "",
          mobile: user.mobileNo
        });
        setCustomerId(user.customerId);
      })
      .catch((error) => console.error("Error fetching user data:", error));

    // Fetch discounts
    axios.get("http://localhost:8086/discount/all")
      .then((response) => {
        const now = new Date();
        const activeDiscounts = response.data.filter(discount => {
          const startDate = new Date(discount.startDate);
          const endDate = new Date(discount.endDate);
          return discount.active && now >= startDate && now <= endDate;
        });
        setDiscounts(activeDiscounts);
      })
      .catch((error) => console.error("Error fetching discounts:", error));
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUserData({ ...userData, [name]: value });
    setIsAddressSaved(false);
  };

  const validateInputs = () => {
    const errors = [];
    if (!userData.username) errors.push("Username is required.");
    if (!userData.mobile || !/^\d{10}$/.test(userData.mobile)) errors.push("Mobile number must be a 10-digit number.");
    if (!userData.address) errors.push("Address is required.");
    if (!userData.city) errors.push("City is required.");
    if (!userData.state) errors.push("State is required.");
    if (!userData.zip || !/^\d{6}$/.test(userData.zip)) errors.push("Zip code must be a 6-digit number.");
    return errors;
  };

  const saveAddress = () => {
    const errors = validateInputs();
    if (errors.length > 0) {
      setErrorMessages(errors);
    } else {
      setUserAddress(`${userData.username}, ${userData.address}, ${userData.address2 ? userData.address2 + ', ' : ''}${userData.city}, ${userData.state} - ${userData.zip}`);
      setIsAddressSaved(true);
      alert("Address saved successfully!");
      setErrorMessages([]);
    }
  };

  const applyCoupon = () => {
    const selectedDiscount = discounts.find(d => d.discountCode === couponCode);
    if (selectedDiscount) {
      const discountAmount = (selectedDiscount.discountPercentage / 100) * totalPrice;
      setFinalPrice(totalPrice - discountAmount);
    } else {
      alert("Invalid or inactive coupon code");
    }
  };

  const continueToPayment = () => {
    if (isAddressSaved) {
      navigate('/payment', { 
        state: { 
          cartItems, 
          finalPrice, 
          userAddress, 
          totalPrice, 
          discountCode: couponCode,
          cartId,
          customerId,
          restaurantId
        } 
      });
    } else {
      alert("Please save your address before proceeding to payment.");
    }
  };

  return (
    <div className="container-fluid bg-light" style={{ minHeight: "100vh", paddingTop: "2rem" }}>
      <div className="row justify-content-center">
        <div className="col-md-8 bg-white p-5 rounded shadow">
          <h1 className="text-center text-primary mb-4">Checkout Page</h1>

          <div className="card mb-4">
            <h2 className="card-header text-primary">Cart Items</h2>
            <ul className="list-group list-group-flush">
              {cartItems.map((item) => (
                <li key={item.id} className="list-group-item d-flex justify-content-between align-items-center">
                  <span>{item.item.itemName} - Quantity: {item.quantity}</span>
                  <span className="badge bg-primary rounded-pill">Rs.{item.totalPrice.toFixed(2)}</span>
                </li>
              ))}
            </ul>
            <h5 className="card-footer text-primary">Total Price: <strong>Rs.{totalPrice.toFixed(2)}</strong></h5>
          </div>

          <div className="card mb-4">
            <h2 className="card-header text-primary">Delivery Address</h2>
            <div className="card-body">
              <form>
                <div className="row mb-3">
                  <div className="col">
                    <input
                      type="text"
                      name="username"
                      value={userData.username}
                      onChange={handleInputChange}
                      className="form-control"
                      placeholder="Full Name"
                    />
                  </div>
                  <div className="col">
                    <input
                      type="text"
                      name="mobile"
                      value={userData.mobile}
                      onChange={handleInputChange}
                      className="form-control"
                      placeholder="Mobile Number"
                    />
                  </div>
                </div>
                <input
                  type="text"
                  name="address"
                  value={userData.address}
                  onChange={handleInputChange}
                  className="form-control mb-3"
                  placeholder="Address Line 1"
                />
                <input
                  type="text"
                  name="address2"
                  value={userData.address2}
                  onChange={handleInputChange}
                  className="form-control mb-3"
                  placeholder="Address Line 2 (Optional)"
                />
                <div className="row mb-3">
                  <div className="col">
                    <input
                      type="text"
                      name="city"
                      value={userData.city}
                      onChange={handleInputChange}
                      className="form-control"
                      placeholder="City"
                    />
                  </div>
                  <div className="col">
                    <input
                      type="text"
                      name="state"
                      value={userData.state}
                      onChange={handleInputChange}
                      className="form-control"
                      placeholder="State"
                    />
                  </div>
                  <div className="col">
                    <input
                      type="text"
                      name="zip"
                      value={userData.zip}
                      onChange={handleInputChange}
                      className="form-control"
                      placeholder="Zip Code"
                    />
                  </div>
                </div>
                {errorMessages.length > 0 && (
                  <div className="alert alert-danger">
                    {errorMessages.map((msg, index) => (
                      <p key={index} className="mb-0">{msg}</p>
                    ))}
                  </div>
                )}
                <button type="button" className="btn btn-primary" onClick={saveAddress}>
                  Save Address
                </button>
              </form>
              {isAddressSaved && (
                <div className="mt-3">
                  <h5>Saved Address:</h5>
                  <p>{userAddress}</p>
                </div>
              )}
            </div>
          </div>

          <div className="card mb-4">
            <h2 className="card-header text-primary">Apply Discount</h2>
            <div className="card-body">
              <input
                type="text"
                className="form-control mb-3"
                value={couponCode}
                onChange={(e) => setCouponCode(e.target.value)}
                placeholder="Enter Coupon Code"
              />
              <button className="btn btn-success" onClick={applyCoupon}>Apply Coupon</button>
              <h5 className="mt-3">Available Coupons:</h5>
              <ul className="list-group">
                {discounts.map((discount) => (
                  <li key={discount.discountCode} className="list-group-item">
                    <span>{discount.discountCode}: {discount.discountPercentage}% off (Valid until {new Date(discount.endDate).toLocaleDateString()})</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <div className="card mb-4">
            <h2 className="card-header text-primary">Final Price</h2>
            <h5 className="card-body">Total After Discount: <strong>Rs.{finalPrice.toFixed(2)}</strong></h5>
            <button className="btn btn-primary btn-lg" onClick={continueToPayment}>
              Proceed to Payment
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}



Payment Page:
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';

export default function Component() {
  const navigate = useNavigate();
  const location = useLocation();
  const { cartItems, finalPrice, userAddress, totalPrice, discountCode, cartId, customerId, restaurantId } = location.state || {};

  const [paymentMethod, setPaymentMethod] = useState('card');
  const [paymentDetails, setPaymentDetails] = useState({
    cardNumber: '',
    validThru: '',
    cvv: '',
    upiId: '',
  });
  const [error, setError] = useState('');

  const handlePaymentChange = (e) => {
    setPaymentDetails({ ...paymentDetails, [e.target.name]: e.target.value });
  };

  const handlePaymentMethodChange = (e) => {
    setPaymentMethod(e.target.value);
    // Reset payment details when switching methods
    setPaymentDetails({
      cardNumber: '',
      validThru: '',
      cvv: '',
      upiId: '',
    });
  };

  const handlePayment = async () => {
    try {
      // Validate payment details
      if (paymentMethod === 'card') {
        if (!paymentDetails.cardNumber || !paymentDetails.validThru || !paymentDetails.cvv) {
          setError('Please fill in all card details.');
          return;
        }
      } else if (paymentMethod === 'upi') {
        if (!paymentDetails.upiId) {
          setError('Please enter your UPI ID.');
          return;
        }
      }

      const discountAmount = totalPrice - finalPrice;
      const newOrder = {
        neworder: {
          totalAmount: finalPrice,
          orderStatus: 'Pending',
          paymentMethod: paymentMethod,
          orderDate: new Date().toISOString(),
          deliverAddress: userAddress,
          discountApplied: discountAmount > 0,
          discountAmount: discountAmount,
        },
        customer_id: customerId,
        restaurant_id: restaurantId,
        cart_id: cartId,
      };

      const orderResponse = await axios.post('http://localhost:8085/order/add', newOrder);
      const createdOrderId = orderResponse.data.order_id;

      const paymentData = {
        orderId: createdOrderId,
        restaurantId: restaurantId,
        totalAmount: finalPrice,
        paymentMethod: paymentMethod,
        status: 'Completed'
      };

      await axios.post('http://localhost:8086/payments', paymentData);

      navigate('/order-confirmation', { 
        state: { 
          confirmed: true, 
          orderId: createdOrderId, 
          finalPrice,
          userAddress
        } 
      });
    } catch (error) {
      console.error('Error processing payment:', error);
      setError('There was an error processing your payment. Please try again.');
    }
  };

  return (
    <div className="container mt-5">
      <h1 className="text-center mb-4">Payment</h1>
      <div className="card">
        <div className="card-body">
          <h5 className="card-title">Order Summary</h5>
          <p><strong>Total Amount:</strong> Rs. {totalPrice.toFixed(2)}</p>
          {discountCode && <p><strong>Discount Applied:</strong> {discountCode}</p>}
          <p><strong>Final Amount:</strong> Rs. {finalPrice.toFixed(2)}</p>
          <p><strong>Delivery Address:</strong> {userAddress}</p>
          <h5 className="mt-4">Payment Method</h5>
          <select
            className="form-select mb-3"
            value={paymentMethod}
            onChange={handlePaymentMethodChange}
          >
            <option value="card">Credit/Debit Card</option>
            <option value="upi">UPI</option>
          </select>
          {paymentMethod === 'card' && (
            <div>
              <input
                type="text"
                className="form-control mb-2"
                name="cardNumber"
                placeholder="Card Number"
                value={paymentDetails.cardNumber}
                onChange={handlePaymentChange}
              />
              <input
                type="text"
                className="form-control mb-2"
                name="validThru"
                placeholder="Valid Thru (MM/YY)"
                value={paymentDetails.validThru}
                onChange={handlePaymentChange}
              />
              <input
                type="password"
                className="form-control mb-2"
                name="cvv"
                placeholder="CVV"
                value={paymentDetails.cvv}
                onChange={handlePaymentChange}
              />
            </div>
          )}
          {paymentMethod === 'upi' && (
            <input
              type="text"
              className="form-control mb-2"
              name="upiId"
              placeholder="Enter your UPI ID"
              value={paymentDetails.upiId}
              onChange={handlePaymentChange}
            />
          )}
          {error && <div className="alert alert-danger mt-3">{error}</div>}
          <button className="btn btn-primary mt-3 w-100" onClick={handlePayment}>
            Pay Now
          </button>
        </div>
      </div>
    </div>
  );
}

Order Confirmation Page::
import React from 'react';
import { useLocation } from 'react-router-dom';

export default function Component() {
  const location = useLocation();
  const { confirmed, orderId, finalPrice, userAddress } = location.state || {};

  if (!confirmed) {
    return (
      <div className="container mt-5">
        <div className="alert alert-danger">
          No order confirmation found. Please try placing your order again.
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-5">
      <div className="card">
        <div className="card-body">
          <h1 className="card-title text-center text-success">Order Confirmed!</h1>
          <div className="text-center mb-4">
            <i className="bi bi-check-circle-fill text-success" style={{fontSize: '4rem'}}></i>
          </div>
          <p className="text-center">Thank you for your order. Your order has been successfully placed and confirmed.</p>
          <div className="mt-4">
            <p><strong>Order ID:</strong> {orderId}</p>
            <p><strong>Total Amount Paid:</strong> Rs. {finalPrice.toFixed(2)}</p>
            <p><strong>Delivery Address:</strong> {userAddress}</p>
          </div>
        </div>
      </div>
    </div>
  );
}